name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vropfile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest

    steps:
      - name: code checkout
        uses: actions/checkout@v4

      - name: Maven test
        run: mvn test

      - name: checkstyle
        run: mvn checkstyle:checkstyle

      - name: set java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: setup sonar
        uses: warchant/setup-sonar-scanner@v7

      - name: sonarqube scan
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonarprojectkey=${{ secrets.SONAR_PROJECT_KEY }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath=target/surefire-reports/
           -Dsonar.jacoco.reportsPath=target/jacoco.exec
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

      - name: sonar quality gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  # BUILD_PUBLISH:
  #   needs: Testing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: code checkout
  #       uses: actions/checkout@v4


  #     - name: upload image to ECR
  #       uses: appleboy/docker-ecr-action@master
  #       with:
  #         access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         registry: ${{ secrets.REGISTRY }}
  #         cache_from: ${{ secrets.cache }}
  #         repo: ${{ env.ECR_REPOSITORY}}
  #         region: ${{ env.AWS_REGION}}
  #         tags: latest,${{ github.run_number}} 
  #         daemon_off: false
  #         dockerfile: ./Dockerfile
  #         context: ./

  # DeployToEKS:
  #   needs: BUILD_PUBLISH
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: code checkout
  #       uses: actions/checkout@v4

  #     - name: configure aws creds
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION}}

  #     - name: get kube config
  #       run: aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name ${{ env.EKS_CLUSTER }}

  #     - name: print config file
  #       run: cat ~/.kube/config

  #     - name: login to ecr
  #       run: kubectl create secret docker-registry regched --docker-server=${{ secrets.REGISTRY }} --docker-usename=AWS --docker-password=$(aws ecr get-login-password)

  #     - name: Deploy Helm
  #       uses: bitovi/github-actions-deploy-eks-helm@v1.2.10
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION}}
  #         cluster-name: ${{ env.EKS_CLUSTER }}
  #         config-files: .github/values/dev.yaml
  #         chart-path: helm/vprofilecharts
  #         namespace: default
  #         values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
  #         name: vprofile-stack 